#compdef prake

typeset -A opt_args

LANG_LIST=(golang dirs bash python nodejs jvm alias)

# https://stackoverflow.com/a/8574392
function _containsElement () {
	local match="$1"; shift
	for e in $@; do
		[[ "$e" == "$match" ]] && return 0
	done
	return 1
}

function _prake {
	local -a line

	_arguments -C \
		"-h[Show short help information]" \
		"--help[Show long help information]" \
		"-v[Show short version information]" \
		"--version[Show long version information]" \
		"-d[Enable debugging]" \
		"--debug[Enable debugging]" \
		"-n[Specify project name]" \
		"--name[Specify project name]" \
		"1:langs:($LANG_LIST)" \
		"*:: :->args"

	IDX=$(( ${#line[@]} - 1 ))

	for i in {$IDX..0}; do
		if _containsElement "${line[$i]}" ${LANG_LIST[@]} prake; then
			IDX="$i"
			break
		fi
	done

	case "$line[$IDX]" in
		(prake)
			_prake ;;
		(bash)
			_prake_bash ;;
		(dirs) 
			_prake_dirs ;;
		(golang) 
			_prake_golang ;;
		(python) 
			_prake_python ;;
		(nodejs) 
			_prake_nodejs ;;
		(jvm) 
			_prake_jvm ;;
		(alias)
			_prake_alias ;;
	esac
}

function _prake_alias {
	_arguments \
		"-l[List existing aliases]" \
		"--list[List existing aliases]" \
		"*:langs:($LANG_LIST)"
}

function _prake_bash {
	_arguments \
		"-d[Defaults from benjcs-bash-boilerplate]" \
		"--defaults[Defaults from benjcs-bash-boilerplate]" \
		"*:langs:($LANG_LIST)"
}

function _prake_dirs {
	_arguments \
		"-g[Git init]" \
		"--git[Git init]" \
		"-v[Create VirkSpace]" \
		"--virkspace[Create VirkSpace]" \
		"-a[Comma separated list of dirs to make]:path" \
		"--additional[Comma separated list of dirs to make]:path" \
		"-p[Starting directory]:path" \
		"--path[Starting directory]:path" \
		"*:langs:($LANG_LIST)"
}

function _prake_golang {
	_arguments \
		"-p[Package name (e.g. github.com/me/repo_name)]:pkg" \
		"--package[Package name (e.g. github.com/me/repo_name)]:pkg" \
		"-g[\`go env gopath\` / directory of choice]:dir" \
		"--gopath[\`go env gopath\` / directory of choice]:dir" \
		"*:langs:($LANG_LIST)"
}

function _prake_python {
	_arguments \
		"-p[Path to Python binary]:path" \
		"--path[Path to Python binary]:path" \
		"-r[Python revision (e.g. 3.7)]:rev" \
		"--revision[Python revision (e.g. 3.7)]:rev" \
		"-v[Create a virtual environment]" \
		"--venv[Create a virtual environment]" \
		"*:langs:($LANG_LIST)"
}

function _prake_nodejs {
	_arguments \
		"-b[Binpath to npm/yarn]:path" \
		"--bin[Binpath to npm/yarn]:path" \
		"-n[Use NPM]" \
		"--npm[Use NPM]" \
		"-y[Use Yarn]" \
		"--yarn[Use Yarn]" \
		"-a[Default inputs]" \
		"--auto[Default inputs]" \
		"*:langs:($LANG_LIST)"
}

function _prake_jvm {
	_arguments \
		"-p[Package name (e.g. world.hello)]:pkg" \
		"--package[Package name (e.g. world.hello)]:pkg" \
		"-g[Use Gradle]" \
		"--gradle[Use Gradle]" \
		"-m[Use Maven]" \
		"--maven[Use Maven]" \
		"-s[Spring Initializr]" \
		"--spring[Spring Initializr]" \
		"*:langs:($LANG_LIST)"
}
